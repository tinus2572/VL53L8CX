


// const VL53L8CX_API_REVISION: &str = "VL53L8CX_1.0.4";

// const VL53L8CX_DEFAULT_I2C_ADDRESS: u16 = 0x52;


pub const VL53L8CX_RESOLUTION_4X4: u8 = 16;
pub const VL53L8CX_RESOLUTION_8X8: u8 = 64;


// const VL53L8CX_TARGET_ORDER_CLOSEST: u8 = 1;
// const VL53L8CX_TARGET_ORDER_STRONGEST: u8 = 2;

// const VL53L8CX_RANGING_MODE_CONTINUOUS: u8 = 1;
// const VL53L8CX_RANGING_MODE_AUTONOMOUS: u8 = 3;

// const VL53L8CX_POWER_MODE_SLEEP: u8 = 0;
// const VL53L8CX_POWER_MODE_WAKEUP: u8 = 1;

// const VL53L8CX_STATUS_OK: u8 = 0;
// const VL53L8CX_STATUS_TIMEOUT_ERROR: u8 = 1;
// const VL53L8CX_STATUS_CORRUPTED_FRAME: u8 = 2;
// const VL53L8CX_STATUS_LASER_SAFETY: u8 = 3;
// const VL53L8CX_MCU_ERROR: u8 = 66;
// const VL53L8CX_STATUS_INVALID_PARAM: u8 = 127;
// const VL53L8CX_STATUS_ERROR: u8 = 255;

// if VL53L8CX_NB_TARGET_PER_ZONE == 1 {

// const VL53L8CX_START_BH: u32 = 0x0000000D;
// const VL53L8CX_METADATA_BH: u32 = 0x54B400C0;
// const VL53L8CX_COMMONDATA_BH: u32 = 0x54C00040;
// const VL53L8CX_AMBIENT_RATE_BH: u32 = 0x54D00104;
// const VL53L8CX_SPAD_COUNT_BH: u32 = 0x55D00404;
// const VL53L8CX_NB_TARGET_DETECTED_BH: u32 = 0xDB840401;
// const VL53L8CX_SIGNAL_RATE_BH: u32 = 0xDBC40404;
// const VL53L8CX_RANGE_SIGMA_MM_BH: u32 = 0xDEC40402;
// const VL53L8CX_DISTANCE_BH: u32 = 0xDF440402;
// const VL53L8CX_REFLECTANCE_BH: u32 = 0xE0440401;
// const VL53L8CX_TARGET_STATUS_BH: u32 = 0xE0840401;
// const VL53L8CX_MOTION_DETECT_BH: u32 = 0xD85808C0;

// const VL53L8CX_METADATA_IDX: u16 = 0x54B4;
// const VL53L8CX_SPAD_COUNT_IDX: u16 = 0x55D0;
// const VL53L8CX_AMBIENT_RATE_IDX: u16 = 0x54D0;
// const VL53L8CX_NB_TARGET_DETECTED_IDX: u16 = 0xDB84;
// const VL53L8CX_SIGNAL_RATE_IDX: u16 = 0xDBC4;
// const VL53L8CX_RANGE_SIGMA_MM_IDX: u16 = 0xDEC4;
// const VL53L8CX_DISTANCE_IDX: u16 = 0xDF44;
// const VL53L8CX_REFLECTANCE_EST_PC_IDX: u16 = 0xE044;
// const VL53L8CX_TARGET_STATUS_IDX: u16 = 0xE084;
// const VL53L8CX_MOTION_DETEC_IDX: u16 = 0xD858;

// } else {
// const VL53L8CX_START_BH: u32 = 0x0000000D;
// const VL53L8CX_METADATA_BH: u32 = 0x54B400C0;
// const VL53L8CX_COMMONDATA_BH: u32 = 0x54C00040;
// const VL53L8CX_AMBIENT_RATE_BH: u32 = 0x54D00104;
// const VL53L8CX_NB_TARGET_DETECTED_BH: u32 = 0x57D00401;
// const VL53L8CX_SPAD_COUNT_BH: u32 = 0x55D00404;
// const VL53L8CX_SIGNAL_RATE_BH: u32 = 0x58900404;
// const VL53L8CX_RANGE_SIGMA_MM_BH: u32 = 0x64900402;
// const VL53L8CX_DISTANCE_BH: u32 = 0x66900402;
// const VL53L8CX_REFLECTANCE_BH: u32 = 0x6A900401;
// const VL53L8CX_TARGET_STATUS_BH: u32 = 0x6B900401;
// const VL53L8CX_MOTION_DETECT_BH: u32 = 0xCC5008C0;

// const VL53L8CX_METADATA_IDX: u16 = 0x54B4;
// const VL53L8CX_SPAD_COUNT_IDX: u16 = 0x55D0;
// const VL53L8CX_AMBIENT_RATE_IDX: u16 = 0x54D0;
// const VL53L8CX_NB_TARGET_DETECTED_IDX: u16 = 0x57D0;
// const VL53L8CX_SIGNAL_RATE_IDX: u16 = 0x5890;
// const VL53L8CX_RANGE_SIGMA_MM_IDX: u16 = 0x6490;
// const VL53L8CX_DISTANCE_IDX: u16 = 0x6690;
// const VL53L8CX_REFLECTANCE_EST_PC_IDX: u16 = 0x6A90;
// const VL53L8CX_TARGET_STATUS_IDX: u16 = 0x6B90;
// const VL53L8CX_MOTION_DETEC_IDX: u16 = 0xCC50;
// } 

pub const VL53L8CX_NVM_DATA_SIZE: u16 = 492;
pub const VL53L8CX_CONFIGURATION_SIZE: u16 = 972;
pub const VL53L8CX_OFFSET_BUFFER_SIZE: u16 = 488;
pub const VL53L8CX_XTALK_BUFFER_SIZE: u16 = 776;

pub const VL53L8CX_DCI_ZONE_CONFIG: u16 = 0x5450;
pub const VL53L8CX_DCI_FREQ_HZ: u16 = 0x5458;
pub const VL53L8CX_DCI_INT_TIME: u16 = 0x545C;
pub const VL53L8CX_DCI_FW_NB_TARGET: u16 = 0x5478;
pub const VL53L8CX_DCI_RANGING_MODE: u16 = 0xAD30;
pub const VL53L8CX_DCI_DSS_CONFIG: u16 = 0xAD38;
pub const VL53L8CX_DCI_TARGET_ORDER: u16 = 0xAE64;
pub const VL53L8CX_DCI_SHARPENER: u16 = 0xAED8;
pub const VL53L8CX_DCI_INTERNAL_CP: u16 = 0xB39C;
pub const VL53L8CX_DCI_SYNC_PIN: u16 = 0xB5F0;
pub const VL53L8CX_DCI_MOTION_DETECTOR_CFG: u16 = 0xBFAC;
pub const VL53L8CX_DCI_SINGLE_RANGE: u16 = 0xD964;
pub const VL53L8CX_DCI_OUTPUT_CONFIG: u16 = 0xD968;
pub const VL53L8CX_DCI_OUTPUT_ENABLES: u16 = 0xD970;
pub const VL53L8CX_DCI_OUTPUT_LIST: u16 = 0xD980;
pub const VL53L8CX_DCI_PIPE_CONTROL: u16 = 0xDB80;

pub const VL53L8CX_UI_CMD_STATUS: u16 = 0x2C00;
pub const VL53L8CX_UI_CMD_START: u16 = 0x2C04;
pub const VL53L8CX_UI_CMD_END: u16 = 0x2FFF;


const L5CX_AMB_SIZE: u16 = VL53L8CX_DISABLE_AMBIENT_PER_SPAD * 260;
const L5CX_SPAD_SIZE: u16 = VL53L8CX_DISABLE_NB_SPADS_ENABLED * 260;
const L5CX_NTAR_SIZE: u16 = VL53L8CX_DISABLE_NB_TARGET_DETECTED * 68;
const L5CX_SPS_SIZE: u16 = VL53L8CX_DISABLE_SIGNAL_PER_SPAD * 
    ((256 * VL53L8CX_NB_TARGET_PER_ZONE) + 4);
const L5CX_SIGR_SIZE: u16 = VL53L8CX_DISABLE_RANGE_SIGMA_MM * 
    ((128 * VL53L8CX_NB_TARGET_PER_ZONE) + 4);
const L5CX_DIST_SIZE: u16 = VL53L8CX_DISABLE_DISTANCE_MM *
    ((128 * VL53L8CX_NB_TARGET_PER_ZONE) + 4);
const L5CX_RFLEST_SIZE: u16 = VL53L8CX_DISABLE_REFLECTANCE_PERCENT *
    ((64 * VL53L8CX_NB_TARGET_PER_ZONE) + 4);
const L5CX_STA_SIZE: u16 = VL53L8CX_DISABLE_TARGET_STATUS * 
    ((64 * VL53L8CX_NB_TARGET_PER_ZONE) + 4);
const L5CX_MOT_SIZE: u16 = VL53L8CX_DISABLE_MOTION_INDICATOR * 144;

const VL53L8CX_MAX_RESULTS_SIZE: u16 = 40 
+ L5CX_AMB_SIZE + L5CX_SPAD_SIZE + L5CX_NTAR_SIZE + L5CX_SPS_SIZE 
+ L5CX_SIGR_SIZE + L5CX_DIST_SIZE + L5CX_RFLEST_SIZE + L5CX_STA_SIZE 
+ L5CX_MOT_SIZE + 20;

    
pub const VL53L8CX_TEMPORARY_BUFFER_SIZE: u16 = 
if 1024 < VL53L8CX_MAX_RESULTS_SIZE { 
    VL53L8CX_MAX_RESULTS_SIZE 
} else {
    1024
};


// struct VL53L8CX_Configuration {
//     platform: ,
//     streamcount: u8,
//     data_read_size: u32,
//     default_configuration: u8,
//     default_xtalk: u8,
//     offset_data: [u8, VL53L8CX_OFFSET_BUFFER_SIZE],
//     xtalk_data: [u8, VL53L8CX_XTALK_BUFFER_SIZE],
//     temp_buffer: [u8, VL53L8CX_TEMPORARY_BUFFER_SIZE],
//     is_auto_stop_enabled: u8,  
// }


// struct VL53L8CX_ResultsData {
//     silicon_temp_degc: i8,
//     ambient_per_spad: [u32, VL53L8CX_RESOLUTION_8X8],
//     nb_target_detected[u8, VL53L8CX_RESOLUTION_8X8],
//     nb_spads_enabled[u32, VL53L8CX_RESOLUTION_8X8],
//     signal_per_spad[u32, (VL53L8CX_RESOLUTION_8X8 * VL53L8CX_NB_TARGET_PER_ZONE)],
//     range_sigma_mm[u16, (VL53L8CX_RESOLUTION_8X8 * VL53L8CX_NB_TARGET_PER_ZONE)],
//     distance_mm[u16, (VL53L8CX_RESOLUTION_8X8 * VL53L8CX_NB_TARGET_PER_ZONE)],
//     reflectance[u8, (VL53L8CX_RESOLUTION_8X8 * VL53L8CX_NB_TARGET_PER_ZONE)],
//     target_status[u8, (VL53L8CX_RESOLUTION_8X8 * VL53L8CX_NB_TARGET_PER_ZONE)],
//     struct motion_indicator {
//     global_indicator_1: u32,
//     global_indicator_2: u32,
//     status: u8,
//     nb_of_detected_aggregates: u8,
//     nb_of_aggregates: u8,
//     spare: u8,
//     motion: [u8, 32],
// } 

// } 


// union Block_header {
// bytes: u32,
// struct {
//     type: u32,
//     size: u32,
//     idx: u32,
// }
// }

pub const VL53L8CX_NB_TARGET_PER_ZONE: u16 = 1;


// Change the value to 1 to DISABLE the given parameter 
// (All enable by default)
const VL53L8CX_DISABLE_AMBIENT_PER_SPAD: u16 = 0;
const VL53L8CX_DISABLE_NB_SPADS_ENABLED: u16 = 0;
const VL53L8CX_DISABLE_NB_TARGET_DETECTED: u16 = 0;
const VL53L8CX_DISABLE_SIGNAL_PER_SPAD: u16 = 0;
const VL53L8CX_DISABLE_RANGE_SIGMA_MM: u16 = 0;
const VL53L8CX_DISABLE_DISTANCE_MM: u16 = 0;
const VL53L8CX_DISABLE_REFLECTANCE_PERCENT: u16 = 0;
const VL53L8CX_DISABLE_TARGET_STATUS: u16 = 0;
const VL53L8CX_DISABLE_MOTION_INDICATOR: u16 = 0;

// const DEFAULT_I2C_BUFFER_LEN: u16 = 32;

// struct VL53L8CX_Platform {
//     address: u16,
//     dev_i2c: I2C,
//     dev_spi: SPI,
//     cs_pin: u32,
//     spi_speed: u32,
//     lpn_pin: u32,
//     i2c_rst_pin: u32,
// }